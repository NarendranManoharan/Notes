API key authorization: - query parameters
============
-use the api key in url to get the response
401- Ivalid URL response if the api key not enetered properly

API used for Testing: https://openweathermap.org/current#name

Sign up for an account and obtain your key from the above mentioned API provider in order to hands-on.

Basic auth: - authorization header
========
API used: https://postman-echo.com/basic-auth 

Username: postman
Password: password 

Success: 200 OK
Unsuccessful: 401 Unauthorized

Bearer token Authorization: -authorization header
============
- Also known as "token Authentication"
-How should we understand this? Bearer Authentication == Give access to the bearer of this token
-what is a bearer token? Bearer token is cryptic string. (cryptic: not easily understandable)
-When and by whom it will be generated? generated by the server in response to a login request
-Where should we use it? When making a request to the protected resource, the request should have the bearer token in the Authorization headers

-Originally it was developed as part of OAuth 2.0, but its used individually as well

API for testing: https://api.github.com/user/repos 
APIs for GitHub can be found at:  https://docs.github.com/en/rest 
NOTE: The URL may vary in future. Rely on Google search

-Get the access tokens from GIthub page
Send the request by selecting the auth type as Bearer Token and by default the token will be added to the header as Authorization header	


Digest-Auth: (similar to two-factor authentication)
===========
-this method challenge with these parameters (Realm,nonce,qop,algorithm)
- The client send the request to the API endpoint
-If the requested resource is of protected nature,then the server going to return an 401 unauthorized response along with some values, 
Those values are,
-Realm: A string specified by the server in the WWW-authenticate response header
-Nonce: A unique string specified by the server in the WWW.authenticate response header
-qop: The quality of protection applied to the message. The values must be the one of the alternatives specifies by the server in WWW-authenticate response header
-need to request again with those parameters with same username and password
https://postman-echo.com/digest-auth


OAuth
=======
OAuth1.0 (deprecated in 2012)
OAuth2.0

- communication between two different servers/services is considered as Oauth
1)user want to get the image from google drive and print using thirdparty application
Step 1: user send a req to walmart
Step 2: Walmart return a response with url apended with some parameters (source, redirect uri, client id, etc.,)
Step 3: user acquire the uri and navigate to google drive
Step 4: Google warn the user that the call api having these kind of access on ur account, Sure want to accpt
Step 5: once user accept , walmart can acces users google photos

General definition:
OAuth 2.0, which stands for “Open Authorization”, is a standard designed to allow a website or application to access protected resources hosted by other web apps on behalf of a user.